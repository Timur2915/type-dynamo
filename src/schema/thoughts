QUERY METHODS

scan => 
        Users.onIndex.emailIndex
        .scan({
            parallelBatches?
            consistentRead?
            consumedCapacity?
        })
        .filter(
            match('id', isGreatherThan(5))
            .and.
            if(
                match('age', isLessThan('20'))
                .or.
                match('color', isEqualTo('yellow'))
            )
        )
        .withAttributes(['id', 'email'])
        .paginate({
            lastKey: {
                email: 'lucas.mafra95@gmail.com'
            },
            limit: 50
        })
// ORM + onIndex (optional) + method + filter (optional) + withAttributes (optional) + paginate/allResults

get =>  
        Users
        .get({
            key: {
                id: '123'
            }
        })
        .withAttributes(['id', 'email'])
()

// ORM + method + withAttributes (optional)

batchGet =>
        Users
        .batchGet({
            keys: [{
                id: '123',
            }, {
                id: '456'
            }],
        })
        .withAttributes(['id', 'email'])
()

// ORM + method + withAttributes (optional)

query =>
        UsersOrders.
        .query({
            partitionKey: '1'
        })
        .withSortKeyCondition(isGreatherThan(10))
        .filter('email', startsWith('lucas'))
        .withAttributes(['id', 'email'])
        .paginate({
            lastKey: {
                email: 'lucas.mafra95@gmail.com'
            },
            limit: 50
        })
()

// ORM + onIndex (optional) + method + withSortKeyCondition (optional) + filter (optional) + withAttributes (optional) + paginate/allResults

====================

WRITE METHODS

put =>
    Users
    .put({
        item: {
            id: '1',
            email: 'lucasmafra@hotmail.com
        }
    })
    .withCondition(attributeNotExists('id'))()

// ORM + method + withCondition (optional)

batchWrite =>
    Users
    .batchWrite({
        items: [{
            ----
        }]
    })()

// ORM + method

batchDelete =>
    Users
    .batchDelete({
        keys: [{
            ----
        }]
    })()

// ORM + method

delete =>
    Users
    .delete({
        key: {
            ----
        }
    })
    .withCondition(id.isGreatherThan('1'))()

// ORM + method + withCondition (optional)

update =>
    Users
    .update({
        item
    })
    .withCondition(----)()

// ORM + method + withCondition (optional)